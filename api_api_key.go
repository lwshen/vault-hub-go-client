/*
Vault Hub Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// APIKeyAPIService APIKeyAPI service
type APIKeyAPIService service

type ApiCreateAPIKeyRequest struct {
	ctx context.Context
	ApiService *APIKeyAPIService
	createAPIKeyRequest *CreateAPIKeyRequest
}

func (r ApiCreateAPIKeyRequest) CreateAPIKeyRequest(createAPIKeyRequest CreateAPIKeyRequest) ApiCreateAPIKeyRequest {
	r.createAPIKeyRequest = &createAPIKeyRequest
	return r
}

func (r ApiCreateAPIKeyRequest) Execute() (*CreateAPIKeyResponse, *http.Response, error) {
	return r.ApiService.CreateAPIKeyExecute(r)
}

/*
CreateAPIKey Method for CreateAPIKey

Create a new API key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAPIKeyRequest
*/
func (a *APIKeyAPIService) CreateAPIKey(ctx context.Context) ApiCreateAPIKeyRequest {
	return ApiCreateAPIKeyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateAPIKeyResponse
func (a *APIKeyAPIService) CreateAPIKeyExecute(r ApiCreateAPIKeyRequest) (*CreateAPIKeyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAPIKeyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIKeyAPIService.CreateAPIKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/api-keys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createAPIKeyRequest == nil {
		return localVarReturnValue, nil, reportError("createAPIKeyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createAPIKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAPIKeyRequest struct {
	ctx context.Context
	ApiService *APIKeyAPIService
	id int64
}

func (r ApiDeleteAPIKeyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAPIKeyExecute(r)
}

/*
DeleteAPIKey Method for DeleteAPIKey

Delete an API key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id API Key ID
 @return ApiDeleteAPIKeyRequest
*/
func (a *APIKeyAPIService) DeleteAPIKey(ctx context.Context, id int64) ApiDeleteAPIKeyRequest {
	return ApiDeleteAPIKeyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *APIKeyAPIService) DeleteAPIKeyExecute(r ApiDeleteAPIKeyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIKeyAPIService.DeleteAPIKey")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/api-keys/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAPIKeysRequest struct {
	ctx context.Context
	ApiService *APIKeyAPIService
	pageSize *int32
	pageIndex *int32
}

// Number of API keys per page (default 20, max 1000)
func (r ApiGetAPIKeysRequest) PageSize(pageSize int32) ApiGetAPIKeysRequest {
	r.pageSize = &pageSize
	return r
}

// Page index, starting from 1 (default 1)
func (r ApiGetAPIKeysRequest) PageIndex(pageIndex int32) ApiGetAPIKeysRequest {
	r.pageIndex = &pageIndex
	return r
}

func (r ApiGetAPIKeysRequest) Execute() (*APIKeysResponse, *http.Response, error) {
	return r.ApiService.GetAPIKeysExecute(r)
}

/*
GetAPIKeys Method for GetAPIKeys

Get API keys for the current user with pagination

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAPIKeysRequest
*/
func (a *APIKeyAPIService) GetAPIKeys(ctx context.Context) ApiGetAPIKeysRequest {
	return ApiGetAPIKeysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return APIKeysResponse
func (a *APIKeyAPIService) GetAPIKeysExecute(r ApiGetAPIKeysRequest) (*APIKeysResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *APIKeysResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIKeyAPIService.GetAPIKeys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/api-keys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pageSize == nil {
		return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
	}
	if *r.pageSize < 1 {
		return localVarReturnValue, nil, reportError("pageSize must be greater than 1")
	}
	if *r.pageSize > 1000 {
		return localVarReturnValue, nil, reportError("pageSize must be less than 1000")
	}
	if r.pageIndex == nil {
		return localVarReturnValue, nil, reportError("pageIndex is required and must be specified")
	}
	if *r.pageIndex < 1 {
		return localVarReturnValue, nil, reportError("pageIndex must be greater than 1")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "pageIndex", r.pageIndex, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAPIKeyRequest struct {
	ctx context.Context
	ApiService *APIKeyAPIService
	id int64
	updateAPIKeyRequest *UpdateAPIKeyRequest
}

func (r ApiUpdateAPIKeyRequest) UpdateAPIKeyRequest(updateAPIKeyRequest UpdateAPIKeyRequest) ApiUpdateAPIKeyRequest {
	r.updateAPIKeyRequest = &updateAPIKeyRequest
	return r
}

func (r ApiUpdateAPIKeyRequest) Execute() (*VaultAPIKey, *http.Response, error) {
	return r.ApiService.UpdateAPIKeyExecute(r)
}

/*
UpdateAPIKey Method for UpdateAPIKey

Update an API key (enable/disable or modify properties)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id API Key ID
 @return ApiUpdateAPIKeyRequest
*/
func (a *APIKeyAPIService) UpdateAPIKey(ctx context.Context, id int64) ApiUpdateAPIKeyRequest {
	return ApiUpdateAPIKeyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VaultAPIKey
func (a *APIKeyAPIService) UpdateAPIKeyExecute(r ApiUpdateAPIKeyRequest) (*VaultAPIKey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VaultAPIKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "APIKeyAPIService.UpdateAPIKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/api-keys/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateAPIKeyRequest == nil {
		return localVarReturnValue, nil, reportError("updateAPIKeyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateAPIKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
