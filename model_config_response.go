/*
Vault Hub Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigResponse{}

// ConfigResponse struct for ConfigResponse
type ConfigResponse struct {
	// Whether OIDC authentication is enabled
	OidcEnabled bool `json:"oidcEnabled"`
}

type _ConfigResponse ConfigResponse

// NewConfigResponse instantiates a new ConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigResponse(oidcEnabled bool) *ConfigResponse {
	this := ConfigResponse{}
	this.OidcEnabled = oidcEnabled
	return &this
}

// NewConfigResponseWithDefaults instantiates a new ConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigResponseWithDefaults() *ConfigResponse {
	this := ConfigResponse{}
	return &this
}

// GetOidcEnabled returns the OidcEnabled field value
func (o *ConfigResponse) GetOidcEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OidcEnabled
}

// GetOidcEnabledOk returns a tuple with the OidcEnabled field value
// and a boolean to check if the value has been set.
func (o *ConfigResponse) GetOidcEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OidcEnabled, true
}

// SetOidcEnabled sets field value
func (o *ConfigResponse) SetOidcEnabled(v bool) {
	o.OidcEnabled = v
}

func (o ConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["oidcEnabled"] = o.OidcEnabled
	return toSerialize, nil
}

func (o *ConfigResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"oidcEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigResponse := _ConfigResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigResponse)

	if err != nil {
		return err
	}

	*o = ConfigResponse(varConfigResponse)

	return err
}

type NullableConfigResponse struct {
	value *ConfigResponse
	isSet bool
}

func (v NullableConfigResponse) Get() *ConfigResponse {
	return v.value
}

func (v *NullableConfigResponse) Set(val *ConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigResponse(val *ConfigResponse) *NullableConfigResponse {
	return &NullableConfigResponse{value: val, isSet: true}
}

func (v NullableConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


