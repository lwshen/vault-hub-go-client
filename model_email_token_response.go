/*
Vault Hub Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailTokenResponse{}

// EmailTokenResponse struct for EmailTokenResponse
type EmailTokenResponse struct {
	// Indicates whether the email token request was accepted
	Success bool `json:"success"`
	// Machine-readable status code describing the outcome
	Code string `json:"code"`
}

type _EmailTokenResponse EmailTokenResponse

// NewEmailTokenResponse instantiates a new EmailTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailTokenResponse(success bool, code string) *EmailTokenResponse {
	this := EmailTokenResponse{}
	this.Success = success
	this.Code = code
	return &this
}

// NewEmailTokenResponseWithDefaults instantiates a new EmailTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailTokenResponseWithDefaults() *EmailTokenResponse {
	this := EmailTokenResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *EmailTokenResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *EmailTokenResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *EmailTokenResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetCode returns the Code field value
func (o *EmailTokenResponse) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *EmailTokenResponse) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *EmailTokenResponse) SetCode(v string) {
	o.Code = v
}

func (o EmailTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

func (o *EmailTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailTokenResponse := _EmailTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailTokenResponse)

	if err != nil {
		return err
	}

	*o = EmailTokenResponse(varEmailTokenResponse)

	return err
}

type NullableEmailTokenResponse struct {
	value *EmailTokenResponse
	isSet bool
}

func (v NullableEmailTokenResponse) Get() *EmailTokenResponse {
	return v.value
}

func (v *NullableEmailTokenResponse) Set(val *EmailTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailTokenResponse(val *EmailTokenResponse) *NullableEmailTokenResponse {
	return &NullableEmailTokenResponse{value: val, isSet: true}
}

func (v NullableEmailTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


