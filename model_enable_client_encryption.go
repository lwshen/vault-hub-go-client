/*
Vault Hub Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnableClientEncryption Enable additional client-side encryption using key derived from API key + vault unique ID
type EnableClientEncryption string

// List of EnableClientEncryption
const (
	TRUE EnableClientEncryption = "true"
	FALSE EnableClientEncryption = "false"
)

// All allowed values of EnableClientEncryption enum
var AllowedEnableClientEncryptionEnumValues = []EnableClientEncryption{
	"true",
	"false",
}

func (v *EnableClientEncryption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnableClientEncryption(value)
	for _, existing := range AllowedEnableClientEncryptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnableClientEncryption", value)
}

// NewEnableClientEncryptionFromValue returns a pointer to a valid EnableClientEncryption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnableClientEncryptionFromValue(v string) (*EnableClientEncryption, error) {
	ev := EnableClientEncryption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnableClientEncryption: valid values are %v", v, AllowedEnableClientEncryptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnableClientEncryption) IsValid() bool {
	for _, existing := range AllowedEnableClientEncryptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnableClientEncryption value
func (v EnableClientEncryption) Ptr() *EnableClientEncryption {
	return &v
}

type NullableEnableClientEncryption struct {
	value *EnableClientEncryption
	isSet bool
}

func (v NullableEnableClientEncryption) Get() *EnableClientEncryption {
	return v.value
}

func (v *NullableEnableClientEncryption) Set(val *EnableClientEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableClientEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableClientEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableClientEncryption(val *EnableClientEncryption) *NullableEnableClientEncryption {
	return &NullableEnableClientEncryption{value: val, isSet: true}
}

func (v NullableEnableClientEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableClientEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

