/*
Vault Hub Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusResponse{}

// StatusResponse struct for StatusResponse
type StatusResponse struct {
	// Application version
	Version string `json:"version"`
	// Git commit hash
	Commit string `json:"commit"`
	// System operational status
	SystemStatus string `json:"systemStatus"`
	// Database connection status
	DatabaseStatus string `json:"databaseStatus"`
}

type _StatusResponse StatusResponse

// NewStatusResponse instantiates a new StatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusResponse(version string, commit string, systemStatus string, databaseStatus string) *StatusResponse {
	this := StatusResponse{}
	this.Version = version
	this.Commit = commit
	this.SystemStatus = systemStatus
	this.DatabaseStatus = databaseStatus
	return &this
}

// NewStatusResponseWithDefaults instantiates a new StatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusResponseWithDefaults() *StatusResponse {
	this := StatusResponse{}
	return &this
}

// GetVersion returns the Version field value
func (o *StatusResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *StatusResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *StatusResponse) SetVersion(v string) {
	o.Version = v
}

// GetCommit returns the Commit field value
func (o *StatusResponse) GetCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *StatusResponse) GetCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *StatusResponse) SetCommit(v string) {
	o.Commit = v
}

// GetSystemStatus returns the SystemStatus field value
func (o *StatusResponse) GetSystemStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemStatus
}

// GetSystemStatusOk returns a tuple with the SystemStatus field value
// and a boolean to check if the value has been set.
func (o *StatusResponse) GetSystemStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemStatus, true
}

// SetSystemStatus sets field value
func (o *StatusResponse) SetSystemStatus(v string) {
	o.SystemStatus = v
}

// GetDatabaseStatus returns the DatabaseStatus field value
func (o *StatusResponse) GetDatabaseStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseStatus
}

// GetDatabaseStatusOk returns a tuple with the DatabaseStatus field value
// and a boolean to check if the value has been set.
func (o *StatusResponse) GetDatabaseStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseStatus, true
}

// SetDatabaseStatus sets field value
func (o *StatusResponse) SetDatabaseStatus(v string) {
	o.DatabaseStatus = v
}

func (o StatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["commit"] = o.Commit
	toSerialize["systemStatus"] = o.SystemStatus
	toSerialize["databaseStatus"] = o.DatabaseStatus
	return toSerialize, nil
}

func (o *StatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"commit",
		"systemStatus",
		"databaseStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatusResponse := _StatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatusResponse)

	if err != nil {
		return err
	}

	*o = StatusResponse(varStatusResponse)

	return err
}

type NullableStatusResponse struct {
	value *StatusResponse
	isSet bool
}

func (v NullableStatusResponse) Get() *StatusResponse {
	return v.value
}

func (v *NullableStatusResponse) Set(val *StatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusResponse(val *StatusResponse) *NullableStatusResponse {
	return &NullableStatusResponse{value: val, isSet: true}
}

func (v NullableStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


