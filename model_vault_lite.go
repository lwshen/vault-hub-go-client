/*
Vault Hub Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VaultLite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultLite{}

// VaultLite struct for VaultLite
type VaultLite struct {
	// Unique identifier for the vault
	UniqueId string `json:"uniqueId"`
	// Human-readable name
	Name string `json:"name"`
	// Human-readable description
	Description *string `json:"description,omitempty"`
	// Category/type of vault
	Category *string `json:"category,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _VaultLite VaultLite

// NewVaultLite instantiates a new VaultLite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultLite(uniqueId string, name string) *VaultLite {
	this := VaultLite{}
	this.UniqueId = uniqueId
	this.Name = name
	return &this
}

// NewVaultLiteWithDefaults instantiates a new VaultLite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultLiteWithDefaults() *VaultLite {
	this := VaultLite{}
	return &this
}

// GetUniqueId returns the UniqueId field value
func (o *VaultLite) GetUniqueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value
// and a boolean to check if the value has been set.
func (o *VaultLite) GetUniqueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueId, true
}

// SetUniqueId sets field value
func (o *VaultLite) SetUniqueId(v string) {
	o.UniqueId = v
}

// GetName returns the Name field value
func (o *VaultLite) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VaultLite) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VaultLite) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VaultLite) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultLite) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VaultLite) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VaultLite) SetDescription(v string) {
	o.Description = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *VaultLite) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultLite) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *VaultLite) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *VaultLite) SetCategory(v string) {
	o.Category = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *VaultLite) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultLite) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *VaultLite) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *VaultLite) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o VaultLite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultLite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uniqueId"] = o.UniqueId
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *VaultLite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uniqueId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVaultLite := _VaultLite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVaultLite)

	if err != nil {
		return err
	}

	*o = VaultLite(varVaultLite)

	return err
}

type NullableVaultLite struct {
	value *VaultLite
	isSet bool
}

func (v NullableVaultLite) Get() *VaultLite {
	return v.value
}

func (v *NullableVaultLite) Set(val *VaultLite) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultLite) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultLite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultLite(val *VaultLite) *NullableVaultLite {
	return &NullableVaultLite{value: val, isSet: true}
}

func (v NullableVaultLite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultLite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


